Code Style and Structure

-   Write concise, technical TypeScript code with accurate examples.
-   Use functional and declarative programming patterns; avoid classes.
-   Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).

TypeScript Usage

-   Use TypeScript for all code; prefer interfaces over types.
-   Use functional components with TypeScript interfaces.

Syntax and Formatting

-   Use the "function" keyword for pure functions.
-   Use declarative JSX.

UI and Styling

-   Use Tailwind CSS for styling.

Performance Optimization

-   Minimize 'use client', 'useEffect', and 'setState'.
-   Use dynamic loading for non-critical components.

Key Conventions

-   Limit 'use client':
    -   Use only for Web API access in small components.
    -   Avoid for data fetching or state management.

CORS Configuration

-   CORS headers must ONLY be set in Laravel's config/cors.php
-   NEVER add CORS headers in Nginx configuration files
-   This prevents duplicate headers that cause browser errors

Project Structure and Deployment

-   All frontend files MUST be placed in the `breeze_next_chikaraemon` directory
-   Automatic deployment is configured:
    -   Frontend: Vercel deployment triggered by GitHub push
    -   Backend: EC2 deployment triggered by GitHub push

When pushing changes, use `git push` without explicitly specifying the branch

/\*\*

-   Authentication Routes
-   All authentication routes for Next.js frontend must be defined in api.php.
-   auth.php is kept empty to maintain Laravel Breeze's standard structure.
    \*/
