---
description: 
globs: 
alwaysApply: true
---
---
title: "プロジェクト共通ルール"
---

# コードスタイルと構造

- 簡潔で専門的な TypeScript コードを正確な例とともに記述してください。
- 関数型と宣言型プログラミングパターンを使用し、クラスは避けてください。
- 補助動詞を含む説明的な変数名を使用してください（例:isLoading、hasError）。

# TypeScript の使用方法

- すべてのコードに TypeScript を使用し、型よりもインターフェースを優先してください。
- TypeScript インターフェースを持つ関数コンポーネントを使用してください。

## 型安全に関するルール

- 型定義を省略せず、可能な限り明示的に記述してください。
- `any` の使用は禁止します。どうしても必要な場合は `unknown` を使用し、型ガードを適用してください。
- 関数の引数・戻り値には明示的な型注釈を記述してください。
- APIレスポンスや外部データには信頼せず、常に型定義を作成して扱ってください。

# 構文とフォーマット

- 純粋な関数には「function」キーワードを使用してください。
- 宣言的な JSX を使用してください。

# UI とスタイリング

- スタイリングには Tailwind CSS を使用してください。

# パフォーマンス最適化

- 「use client」、「useEffect」、「setState」の使用を最小限に抑えてください。
- 重要でないコンポーネントには動的ローディングを使用してください。

# 重要な規約

- 「use client」の使用を制限してください:
  - 小さなコンポーネントでの Web API アクセスにのみ使用してください。
  - データ取得や状態管理には使用しないでください。

# CORS 設定

- CORS ヘッダーは Laravel の config/cors.php にのみ設定してください。
- Nginx 設定ファイルに CORS ヘッダーを追加しないでください。
- これによりブラウザエラーを引き起こす重複ヘッダーを防止します。

# プロジェクト構造とデプロイ

- すべてのフロントエンドファイルは `breeze_next_chikaraemon` ディレクトリに配置する必要があります。
- 自動デプロイが設定されています：
  - フロントエンド:GitHub プッシュにより Vercel デプロイがトリガーされます。
  - バックエンド:GitHub プッシュにより EC2 デプロイがトリガーされます。
- 変更をプッシュする際は、ブランチを明示的に指定せずに `git push` を使用してください。

# 認証ルート

- Next.js フロントエンド用のすべての認証ルートは api.php で定義する必要があります。
- auth.php は Laravel Breeze の標準構造を維持するために空のままにしておきます。

# ロックファイル

- ロックファイルは、package-lock.jsonを使用する。

# 環境変数ファイル（.env）

- フロントエンド：
  - `.env.example`:テンプレート（雛形）。全開発者に共有したい変数のテンプレートを記述し、Git に含める。（公開）
  - `.env.local`:ローカル開発用。APIキーや開発用の変数を記述し、Git に含めない。（機密）
  - ※ 本番環境用の記述をするための.envファイルは作らない。Vercel上で設定する。

- バックエンド：
  - `.env.example`:テンプレート（雛形）。すべての環境変数を記述し、Git に含める。（公開）
  - `.env`:ローカル（開発）環境用の記述。機密情報を含むため、Git に含めない。（機密）
  - `.env.production`:本番環境用の記述。Git に含めず、Dockerfile により `.env` にコピーされる。（機密）

# 開発・デプロイの基本方針

- フロントエンド（Next.js）:
  - 開発環境:Docker を使用（Next.js + Node.js）
  - 本番環境:Vercel にコードを直接デプロイ（Docker 不要）

- バックエンド（Laravel）:
  - 開発環境:Docker を使用（Laravel + MySQL）
  - 本番環境:Docker コンテナごと AWS EC2 にデプロイ

- ※ フロントエンド、バックエンド共に、現在は本番環境ではなく、開発環境で進めていく。

# Docker環境でのURL設定の注意点

- コンテナ間通信（サーバーサイド）では`http://nginx`を使用
  - サーバーサイドのみ: `BACKEND_URL=http://nginx`
  - Laravel内部: `APP_URL=http://nginx`

- ブラウザからの通信（クライアントサイド）では`localhost`を使用
  - クライアントサイド: `NEXT_PUBLIC_BACKEND_URL=http://localhost:8000`
  - ブラウザからアクセス: フロントエンド `http://localhost:3000`、API `http://localhost:8000`

# Docker構成ファイル

- `docker-compose.yml`:開発環境用のDocker定義ファイル。Next.jsフロントエンド、Laravel バックエンド、MySQL、Nginxを含むローカル開発用の構成。

- `docker-compose.prod.yml`:本番環境用のDocker定義ファイル。主にEC2へのデプロイ時に使用され、開発用ボリュームやホストポートの露出を減らし、本番向けにリソース制限やパフォーマンス最適化が施されている。

# APIリクエスト管理

- HTTPリクエストには標準axiosライブラリではなく、`@/lib/axios`からインポートしたカスタムaxiosインスタンスを使用してください。
- これにより、認証処理、エラーハンドリング、リクエストキャンセルの動作が統一されます。

