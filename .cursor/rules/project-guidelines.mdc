---
description: 
globs: 
alwaysApply: true
---
---
title: "プロジェクト共通ルール"
---

# コードスタイルと構造

- シンプル重視（最小限のコードで目的を達成し、肥大化・複雑化・冗長化を避ける）
- 簡潔で専門的な TypeScript コードを正確な例とともに記述してください。
- 関数型と宣言型プログラミングパターンを使用し、クラスは避けてください。
- 補助動詞を含む説明的な変数名を使用してください（例:isLoading、hasError）。

# TypeScript の使用方法

- すべてのコードに TypeScript を使用し、型よりもインターフェースを優先してください。
- TypeScript インターフェースを持つ関数コンポーネントを使用してください。

# 型安全ルール

## 基本方針

- **型エラー 0 を最優先**で維持すること。
- **既存ロジックを壊さない最小限の修正**を原則とする。
- **型注釈は必要な箇所に必ず付ける**（ただし明らかな推論は許容）。
- **`any`は禁止**。どうしても必要な場合は`unknown`＋型ガードで対応。
- **未使用変数は `_` プレフィックス**で明示して残してよい。

## 型定義のルール

- **既存型を最優先で再利用**し、なければ**即座に新しい型を定義**する。
- **`unknown`のまま放置禁止**。未完成コードを残さない。
- 型定義は**既存ファイルに追記**。関係ない場合のみ`@/types/`配下に新規作成を許可。

## 型整理とユーティリティ管理

- 型の**重複は統合**し、**import経路も統一**する。
- 変換ユーティリティ関数は**関連型ファイルにまとめて配置**する。
- 型名衝突時は**`as`エイリアス**を使用し、区別を明示する。

## リファクタ方針

- **型の中身をいじらず**、定義場所とimport整理を中心にする。
- **設計レベルの大改変は禁止**。現状を安全に整理することを優先。

# 構文とフォーマット

- 純粋な関数には「function」キーワードを使用してください。
- 宣言的な JSX を使用してください。

# UI とスタイリング

- スタイリングには Tailwind CSS を使用してください。

# パフォーマンス最適化

- 「use client」、「useEffect」、「setState」の使用を最小限に抑えてください。
- 重要でないコンポーネントには動的ローディングを使用してください。

# 重要な規約

- 「use client」の使用を制限してください:
  - 小さなコンポーネントでの Web API アクセスにのみ使用してください。
  - データ取得や状態管理には使用しないでください。

# APIリクエスト管理

- HTTPリクエストには標準axiosライブラリではなく、`@/lib/axios`からインポートしたカスタムaxiosインスタンスを使用してください。
- これにより、認証処理、エラーハンドリング、リクエストキャンセルの動作が統一されます。

# プロジェクト構造とデプロイ

- すべてのフロントエンドファイルは `breeze_next_chikaraemon` ディレクトリに配置する必要があります。
- 自動デプロイが設定されています：
  - フロントエンド:GitHub プッシュにより Vercel デプロイがトリガーされます。
  - バックエンド:GitHub プッシュにより EC2 デプロイがトリガーされます。
- 変更をプッシュする際は、ブランチを明示的に指定せずに `git push` を使用してください。

# 開発・デプロイの基本方針

- フロントエンド（Next.js）:
  - 開発環境:Docker を使用（Next.js + Node.js）
  - 本番環境:Vercel にコードを直接デプロイ（Docker 不要）

- バックエンド（Laravel）:
  - 開発環境:Docker を使用（Laravel + MySQL）
  - 本番環境:Docker コンテナごと AWS EC2 にデプロイ

- ※ フロントエンド、バックエンド共に、現在は本番環境ではなく、開発環境で進めているが、これから本番環境へデプロイしていく。

# CI/CDとデプロイフロー

- **GitHubフロー**:機能開発は個別のブランチで行い、PRを通してmainにマージします。
- **環境変数管理**:
  - フロントエンド:Vercelダッシュボードで本番環境変数を直接設定。
  - バックエンド：`.env.production`の内容はGitHub ActionsのシークレットとしてENV_PRODUCTIONの名前で管理。
- **自動デプロイプロセス**:
  - フロントエンド:Vercelによる自動デプロイ（mainブランチへのプッシュ時）。
  - バックエンド:GitHub Actionsワークフローがトリガーされ、EC2インスタンスにSSH接続してデプロイを実行。

# Docker構成ファイル

- `docker-compose.yml`:開発環境用のDocker定義ファイル。Next.jsフロントエンド、Laravel バックエンド、MySQL、Nginxを含むローカル開発用の構成。

- `docker-compose.prod.yml`:本番環境用のDocker定義ファイル。主にEC2へのデプロイ時に使用され、開発用ボリュームやホストポートの露出を減らし、本番向けにリソース制限やパフォーマンス最適化が施されている。

- `.dockerignore`:本番環境用の除外設定。フロントエンドのbreeze_next_chikaraemonディレクトリを除外してVercelデプロイ時に使用。

- `.dockerignore.dev`:開発環境用の除外設定。フロントエンドのbreeze_next_chikaraemonディレクトリを含めてローカル開発時に使用。

# Nginx設定ファイル

- `default.conf`:開発環境用の設定ファイル。HTTPのみの基本的なサーバー設定。
- `prod.conf`:本番環境用の設定ファイル。HTTPS/SSL証明書設定を含む。

# Docker環境でのURL設定の注意点

- コンテナ間通信（サーバーサイド）では`http://nginx`を使用
  - サーバーサイドのみ: `BACKEND_URL=http://nginx`
  - Laravel内部: `APP_URL=http://nginx`

- ブラウザからの通信（クライアントサイド）では`localhost`を使用
  - クライアントサイド: `NEXT_PUBLIC_BACKEND_URL=http://localhost:8000`
  - ブラウザからアクセス: フロントエンド `http://localhost:3000`、API `http://localhost:8000`

# 環境変数ファイル（.env）

- フロントエンド：
  - `.env.example`:テンプレート（雛形）。全開発者に共有したい変数のテンプレートを記述し、Git に含める。（公開）
  - `.env.local`:ローカル開発用。APIキーや開発用の変数を記述し、Git に含めない。（機密）
  - ※ 本番環境用の記述をするための.envファイルは作らない。Vercel上で設定する。

- バックエンド：
  - `.env.example`:テンプレート（雛形）。すべての環境変数を記述し、Git に含める。（公開）
  - `.env`:ローカル（開発）環境用の記述。機密情報を含むため、Git に含めない。（機密）
  - `.env.production`:本番環境用の記述。Git に含めず、Dockerfile により `.env` にコピーされる。（機密）

# ロックファイル

- ロックファイルは、package-lock.jsonを使用する。

# CORS 設定

- CORS ヘッダーは Laravel の config/cors.php にのみ設定してください。
- Nginx 設定ファイルに CORS ヘッダーを追加しないでください。
- これによりブラウザエラーを引き起こす重複ヘッダーを防止します。

# 認証ルート

- Next.js フロントエンド用のすべての認証ルートは api.php で定義する必要があります。
- auth.php は Laravel Breeze の標準構造を維持するために空のままにしておきます。

